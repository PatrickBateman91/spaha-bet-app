[{"G:\\Programiranje\\bet-copy\\client\\src\\index.js":"1","G:\\Programiranje\\bet-copy\\client\\src\\App.js":"2","G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\AuthPage.js":"3","G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\DeactivateAccount.js":"4","G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\ChangeAccountDetails.js":"5","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Home.js":"6","G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\AccountDeactivated.js":"7","G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\ResendPassword.js":"8","G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\ChangeProfilePicture.js":"9","G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\SignedOutPage.js":"10","G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\NewPasswordFromEmail.js":"11","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Other\\Footer.js":"12","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Profile\\PublicProfile.js":"13","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\FinishedBets.js":"14","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\AddNewBet.js":"15","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\WaitingForApproval.js":"16","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\ActiveBets.js":"17","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\JoinNewGroup.js":"18","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\CreateNewGroup.js":"19","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Other\\Stats.js":"20","G:\\Programiranje\\bet-copy\\client\\src\\components\\MISC\\Page404.js":"21","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\ManageGroups.js":"22","G:\\Programiranje\\bet-copy\\client\\src\\components\\MISC\\ReturnButton.js":"23","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\DifferentStakes.js":"24","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\NonAuthHome.js":"25","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\Groups.js":"26","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Other\\Notifications.js":"27","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\SameStakes.js":"28","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Profile\\MainProfile.js":"29","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\JointBet.js":"30","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\ManageGroupsModal.js":"31","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\GroupLine.js":"32","G:\\Programiranje\\bet-copy\\client\\src\\components\\MISC\\ApproveBox.js":"33","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\EditModal.js":"34","G:\\Programiranje\\bet-copy\\client\\src\\components\\DumbComponents\\SimpleFunctions.js":"35","G:\\Programiranje\\bet-copy\\client\\src\\components\\Axios\\UserRequests.js":"36","G:\\Programiranje\\bet-copy\\client\\src\\components\\Axios\\BetRequests.js":"37","G:\\Programiranje\\bet-copy\\client\\src\\components\\Axios\\GroupRequests.js":"38","G:\\Programiranje\\bet-copy\\client\\src\\components\\Axios\\OtherRequests.js":"39","G:\\Programiranje\\bet-copy\\client\\src\\components\\Navigation\\SignOutNav.js":"40","G:\\Programiranje\\bet-copy\\client\\src\\components\\Navigation\\MenuManageBets.js":"41","G:\\Programiranje\\bet-copy\\client\\src\\components\\Navigation\\MenuManageGroups.js":"42","G:\\Programiranje\\bet-copy\\client\\src\\components\\DnD-Utilities\\DraggableName.js":"43","G:\\Programiranje\\bet-copy\\client\\src\\components\\DnD-Utilities\\JointDroppable.js":"44","G:\\Programiranje\\bet-copy\\client\\src\\components\\DnD-Utilities\\DropInput.js":"45","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\ChangeGroupName.js":"46","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Profile\\ProfilePicture.js":"47","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\LeaveDeleteGroup.js":"48","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\InvitePeople.js":"49","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\RemovePeople.js":"50","G:\\Programiranje\\bet-copy\\client\\src\\components\\DnD-Utilities\\Utilities.js":"51","G:\\Programiranje\\bet-copy\\client\\src\\components\\MISC\\Mode.js":"52"},{"size":273,"mtime":1595256726000,"results":"53","hashOfConfig":"54"},{"size":3216,"mtime":1598021100000,"results":"55","hashOfConfig":"54"},{"size":16803,"mtime":1612716292134,"results":"56","hashOfConfig":"54"},{"size":1630,"mtime":1612440327868,"results":"57","hashOfConfig":"54"},{"size":14394,"mtime":1612716310612,"results":"58","hashOfConfig":"54"},{"size":19480,"mtime":1612716362278,"results":"59","hashOfConfig":"54"},{"size":789,"mtime":1612440274067,"results":"60","hashOfConfig":"54"},{"size":2682,"mtime":1612717447017,"results":"61","hashOfConfig":"54"},{"size":4366,"mtime":1612747553879,"results":"62","hashOfConfig":"54"},{"size":1008,"mtime":1612716856804,"results":"63","hashOfConfig":"54"},{"size":4378,"mtime":1612750466511,"results":"64","hashOfConfig":"54"},{"size":263,"mtime":1596817086000,"results":"65","hashOfConfig":"54"},{"size":4774,"mtime":1612716447372,"results":"66","hashOfConfig":"54"},{"size":8081,"mtime":1612450010375,"results":"67","hashOfConfig":"54"},{"size":47282,"mtime":1612716380678,"results":"68","hashOfConfig":"54"},{"size":16075,"mtime":1612461171704,"results":"69","hashOfConfig":"54"},{"size":12904,"mtime":1612456541815,"results":"70","hashOfConfig":"54"},{"size":3401,"mtime":1612611433627,"results":"71","hashOfConfig":"54"},{"size":11456,"mtime":1612530692009,"results":"72","hashOfConfig":"54"},{"size":47342,"mtime":1612716439469,"results":"73","hashOfConfig":"54"},{"size":584,"mtime":1596812548000,"results":"74","hashOfConfig":"54"},{"size":17502,"mtime":1612716414429,"results":"75","hashOfConfig":"54"},{"size":251,"mtime":1595322434000,"results":"76","hashOfConfig":"54"},{"size":6865,"mtime":1612436621079,"results":"77","hashOfConfig":"54"},{"size":1435,"mtime":1612367564544,"results":"78","hashOfConfig":"54"},{"size":1074,"mtime":1612449372511,"results":"79","hashOfConfig":"54"},{"size":3731,"mtime":1612367903521,"results":"80","hashOfConfig":"54"},{"size":6856,"mtime":1612459745811,"results":"81","hashOfConfig":"54"},{"size":2435,"mtime":1612371163251,"results":"82","hashOfConfig":"54"},{"size":8719,"mtime":1612436638320,"results":"83","hashOfConfig":"54"},{"size":3033,"mtime":1612368520663,"results":"84","hashOfConfig":"54"},{"size":3210,"mtime":1612369464829,"results":"85","hashOfConfig":"54"},{"size":498,"mtime":1597067732000,"results":"86","hashOfConfig":"54"},{"size":660,"mtime":1612375147429,"results":"87","hashOfConfig":"54"},{"size":10264,"mtime":1612370975612,"results":"88","hashOfConfig":"54"},{"size":5225,"mtime":1612368400123,"results":"89","hashOfConfig":"54"},{"size":2138,"mtime":1612368391232,"results":"90","hashOfConfig":"54"},{"size":1670,"mtime":1612367207353,"results":"91","hashOfConfig":"54"},{"size":1260,"mtime":1612367211218,"results":"92","hashOfConfig":"54"},{"size":484,"mtime":1612195307809,"results":"93","hashOfConfig":"54"},{"size":1689,"mtime":1612530781008,"results":"94","hashOfConfig":"54"},{"size":1377,"mtime":1612367479080,"results":"95","hashOfConfig":"54"},{"size":778,"mtime":1595322508000,"results":"96","hashOfConfig":"54"},{"size":1416,"mtime":1612453768698,"results":"97","hashOfConfig":"54"},{"size":958,"mtime":1597099238000,"results":"98","hashOfConfig":"54"},{"size":1042,"mtime":1597315150000,"results":"99","hashOfConfig":"54"},{"size":1309,"mtime":1612367723465,"results":"100","hashOfConfig":"54"},{"size":828,"mtime":1597164676000,"results":"101","hashOfConfig":"54"},{"size":3699,"mtime":1612530664735,"results":"102","hashOfConfig":"54"},{"size":1895,"mtime":1612368099072,"results":"103","hashOfConfig":"54"},{"size":47,"mtime":1585665738000,"results":"104","hashOfConfig":"54"},{"size":63,"mtime":1612751891122,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"emu0ew",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"108"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\Programiranje\\bet-copy\\client\\src\\index.js",[],["213","214"],"G:\\Programiranje\\bet-copy\\client\\src\\App.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\AuthPage.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\DeactivateAccount.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\ChangeAccountDetails.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Home.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\AccountDeactivated.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\ResendPassword.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\ChangeProfilePicture.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\SignedOutPage.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Authentication\\NewPasswordFromEmail.js",["215"],"import React, { Fragment, Component } from 'react';\r\nimport { checkEmailLink, changePasswordFromEmail } from '../Axios/UserRequests';\r\nimport {emptyFieldsCheck, passwordCheck} from '../DumbComponents/SimpleFunctions';\r\n\r\nclass NewPasswordFromEmail extends Component {\r\n    state = {\r\n            emailValid : false,\r\n            error:false,\r\n            errorMessage:\"\",\r\n            success:false,\r\n            successMessage:\"\"\r\n        }\r\n    \r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0,0);\r\n        const checkEmailPromise = checkEmailLink(this.props.match.params.uid, this.props.match.params.id);\r\n        checkEmailPromise.then(res => {\r\n            if (res.data === \"Email link is valid!\") {\r\n                this.setState({emailValid : true})\r\n            }\r\n        }).catch(err => {\r\n            this.props.history.push('/404')\r\n        })\r\n    }\r\n\r\n    handleResetPassword = (e) => {\r\n        e.preventDefault();\r\n        const pass1 = document.getElementById('new-password1').value;\r\n        const pass2 = document.getElementById('new-password2').value;\r\n        if(!emptyFieldsCheck(pass1) || !emptyFieldsCheck(pass2)){\r\n            this.setState({\r\n                error:true,\r\n                errorMessage:\"Fields cannot be blank!\"\r\n            })\r\n        }\r\n        if(pass1 !== pass2){\r\n            this.setState({\r\n                error:true,\r\n                errorMessage:\"Passwords do not match!\"\r\n            })\r\n        }\r\n        if(!passwordCheck(pass1)){\r\n            this.setState({\r\n                error:true,\r\n                errorMessage:\"Password must be at least 6 characters long and include a number\"\r\n            })\r\n        }\r\n        const changePasswordPromise = changePasswordFromEmail(this.props.match.params.uid, this.props.match.params.id, pass1);\r\n        changePasswordPromise.then(res => {\r\n            this.setState({\r\n                success:true,\r\n                successMessage:\"Password changed successfully! You can login now!\"\r\n            }, () => {\r\n                setTimeout(() => this.props.history.push('/sign-in'), 1500);\r\n            })\r\n        }).catch(err => {\r\n            this.setState({\r\n                error:true,\r\n                errorMessage: err.response.data\r\n            }, () => {\r\n                if(err.response.data !== \"New password cannot be same as the old password!\"){\r\n                    setTimeout(() => this.props.history.push('/'), 1500);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    hideMessages = () => {\r\n        this.setState({\r\n            error:false,\r\n            errorMessage:\"\",\r\n            success:false,\r\n            successMessage:\"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-container main-background\">\r\n   \r\n                    {this.state.emailValid ? <div className=\"fx-column fx-align-center reset-password-container\">\r\n                        <form name=\"reset-password\" id=\"reset-password\" onChange={this.hideMessages} onSubmit={this.handleResetPassword}>\r\n                        <div id=\"change-account-holder\" className=\"basic-column-fx justify-between-fx align-center-fx wrap-fx\">\r\n                    <div className=\"change-account-line\">\r\n                      <label htmlFor=\"new-password1\">Enter new password</label>\r\n                      <input type=\"password\" name=\"new-password1\" id=\"new-password1\" placeholder=\"Enter new password\" autoComplete=\"password\"></input>\r\n                    </div>\r\n                    <div className=\"change-account-line\">\r\n                      <label htmlFor=\"new-password2\">Retype new password</label>\r\n                      <input type=\"password\" name=\"new-password2\" id=\"new-password2\" placeholder=\"Retype password\" autoComplete=\"password\"></input>\r\n                    </div>\r\n                    {this.state.error ? <div className=\"error-message\">{this.state.errorMessage}</div> : null}\r\n                  {this.state.success ? <div className=\"success-message\">{this.state.successMessage}</div> : null}\r\n                  <div className=\"auth-button\">\r\n                    <button type=\"submit\" form=\"reset-password\">Reset password</button>\r\n                  </div>\r\n                  </div>\r\n                  </form>\r\n                    </div> : null}\r\n    \r\n\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewPasswordFromEmail;","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Other\\Footer.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Profile\\PublicProfile.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\FinishedBets.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\AddNewBet.js",["216"],"import React, { Component, Fragment } from 'react';\r\nimport {DndProvider} from 'react-dnd'\r\nimport Backend from 'react-dnd-html5-backend';\r\nimport TouchBackend from 'react-dnd-touch-backend';\r\nimport {usePreview} from 'react-dnd-preview';\r\nimport Groups from '../Groups/Groups';\r\nimport ReturnButton from '../../MISC/ReturnButton';\r\nimport DraggableName from '../../DnD-Utilities/DraggableName';\r\nimport DropInput from '../../DnD-Utilities/DropInput';\r\nimport JointDroppable from '../../DnD-Utilities/JointDroppable';\r\nimport {editBetRequest, uploadBetRequest} from '../../Axios/BetRequests';\r\nimport {getUserData} from '../../Axios/UserRequests';\r\nimport {returnToMain, windowWidth} from '../../DumbComponents/SimpleFunctions';\r\n\r\nclass AddNewBet extends Component {\r\n\r\nstate={\r\n            people:[],\r\n            participants : [\r\n                {id:\"newBetParticipant1\", name:\"\", value:\"\", singleStake : \"\"},\r\n                {id:\"newBetParticipant2\", name:\"\", value:\"\", singleStake : \"\"}\r\n            ],\r\n            additionalClauses:[\r\n                {name :'newBetAdditionalClause1',\r\n                 value:\"\"}],\r\n            draggableElement:{element: \"\", id: \"\"},\r\n            error:false,\r\n            errorMessage:\"\",\r\n            equalBets: false,\r\n            groupsOpen:false,\r\n            jointBet:false,\r\n            jointSelected: [],\r\n            limitedCheck: false,\r\n            moneyClicked: false,\r\n            pageLoaded:false,\r\n            success:false,\r\n            successMessage:\"\",\r\n            selectedGroup: \"\",\r\n            selectedGroupName:\"\",\r\n            options:{enableMouseEvents : true ,enableKeyboardEvents :true}\r\n        }\r\n\r\n    addNewAdditionalClause = (e) => {\r\n        e.stopPropagation();\r\n        let copyClausesFromState = [...this.state.additionalClauses];\r\n        copyClausesFromState.push({\r\n            name:`newBetAdditionalClause${this.state.additionalClauses.length + 1}`,\r\n            value:\"\"\r\n        })\r\n        this.setState({additionalClauses:copyClausesFromState});\r\n    }\r\n\r\n    addNewParticipant = (e) => {\r\n        e.stopPropagation();\r\n        let copyParticipantsFromState = [...this.state.participants];\r\n        copyParticipantsFromState.push({\r\n            id:`newBetParticipant${copyParticipantsFromState.length+1}`, name:\"\", value:\"\", singleStake : \"\"\r\n        })\r\n\r\n        this.setState({participants:copyParticipantsFromState,  equalBets: false})\r\n    }\r\n\r\n    addSuggestion = (e,person, id) => {\r\n        e.stopPropagation();\r\n        document.getElementById(id).classList.remove('cannot-select-person');\r\n        document.getElementById(id).classList.add('selected-person');\r\n\r\n        let copyParticipantsFromState = [...this.state.participants];\r\n        copyParticipantsFromState.forEach(participant => {\r\n            if(id === participant.id){\r\n                participant.name = person;\r\n            }\r\n        })\r\n               \r\n        this.setState({participants: copyParticipantsFromState});\r\n    }\r\n\r\n    alreadyExistsCheck = (person,type) => {\r\n        if(type === \"joint\"){\r\n            for (let i = 0; i < this.state.jointSelected.length; i++){\r\n                if(this.state.jointSelected[i].name === person){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        else{\r\n            for (let i = 0; i < this.state.participants.length; i++){\r\n                if(this.state.participants[i].name === person){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n     \r\n    }\r\n\r\n    componentDidMount(){ \r\n        window.scrollTo(0,0);\r\n        if(this.props.editMode){\r\n            const newGroup = this.props.groups.filter(group => group._id === this.props.selectedGroup);\r\n            this.setState({\r\n                groups:this.props.groups,\r\n                pageLoaded:true,\r\n                people:newGroup[0].people,\r\n                user:this.props.user\r\n            }, () => {\r\n                this.getAndSetEditValues();\r\n            })\r\n        }\r\n        else{\r\n                const getUserPromise = getUserData('get user');\r\n                getUserPromise.then(resUser => {       \r\n                    const getDataPromise = getUserData('get groups');\r\n                    getDataPromise.then(resData => {\r\n                      \r\n                        if(resData.data !== \"User is not a part of any groups!\"){\r\n                            this.setState({\r\n                                groups:resData.data,\r\n                                pageLoaded:true,\r\n                                people: resData.data[0].people,\r\n                                selectedGroup:resData.data[0]._id,\r\n                                selectedGroupName:resData.data[0].name,\r\n                                user: resUser.data\r\n                               })\r\n                        }\r\n                        else{\r\n                            this.setState({\r\n                                groups: [],\r\n                                error:true,\r\n                                errorMessage:\"You cannot add bets until you are apart of a group!\",\r\n                                pageLoaded:true,\r\n                                people : [resUser.data.nickname],\r\n                                selectedGroup: \"\",\r\n                                selectedGroupName: \"\",\r\n                                user : resUser.data,\r\n                            })\r\n                        }\r\n                    }).catch(err => {\r\n                  \r\n                       this.props.history.push('/sign-in')\r\n                    })\r\n                }).catch(err => {\r\n                  \r\n                    this.props.history.push('/sign-in')\r\n                })\r\n            }\r\n        \r\n    }\r\n\r\n    createNewBet = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n            let betAmount;\r\n            let otherStakes;\r\n            let limitedCheckValue = \"\";\r\n            let newBet = {};\r\n            let people = [];\r\n            let additionalClauses = [];\r\n            let falseValue = false;\r\n            let moneyBet = this.state.moneyClicked;\r\n            let limitedCheck = this.state.limitedCheck;\r\n            let differentStakes = this.state.equalBets;\r\n            let subject = document.getElementById(\"newBetSubject\").value;  \r\n            let rightUserTrigger = false;\r\n            let outsiderTrigger = false;\r\n            let copySuggestions = [...this.state.people];\r\n            let copyJointSelected = [...this.state.jointSelected];\r\n            let copyAdditionalClauses = [...this.state.additionalClauses]\r\n            let copyParticipants = [...this.state.participants];\r\n    \r\n            if(limitedCheck){\r\n                limitedCheckValue = document.getElementById('durationLimitedValue').value; \r\n            }\r\n          \r\n            //Združena opklada\r\n            if(this.state.jointBet){\r\n                people = [{side: \"left\", participants: []}, {side: \"right\", participants: []}]\r\n                let leftValue = document.getElementById('joint-left-side-input1').value;\r\n                let leftBet = document.getElementById('joint-left-side-input2').value;\r\n                let rightValue = document.getElementById('joint-right-side-input2').value;\r\n                let rightBet = document.getElementById('joint-right-side-input1').value;\r\n                if(moneyBet){\r\n                    leftBet = parseFloat(leftBet);\r\n                    rightBet = parseFloat(rightBet);\r\n                }\r\n                people[1].value = leftValue;\r\n                people[1].bet = leftBet;\r\n                people[0].value = rightValue;\r\n                people[0].bet = rightBet;\r\n                copyJointSelected.forEach(participant => {\r\n                    if(participant.name === this.state.user.nickname){\r\n                        rightUserTrigger = true;\r\n                    }\r\n                    if(copySuggestions.indexOf(participant.name) === -1){\r\n                        outsiderTrigger = true;\r\n                    }\r\n                    if(participant.id.indexOf(\"left\") !== -1){\r\n                        people[0].participants.push(participant.name)\r\n                    }\r\n                    else{\r\n                        people[1].participants.push(participant.name)\r\n                    }\r\n                })\r\n                if(!rightUserTrigger){\r\n                    return this.setState({\r\n                        error:true,\r\n                        errorMessage:\"You can't add bets that don't include you!\"\r\n                    })\r\n                }\r\n\r\n                if(people[0].participants.length === 0 || people[1].participants.length === 0){\r\n                    return this.setState({\r\n                        error:true,\r\n                        errorMessage:\"One side cannot be empty!\"\r\n                    }) \r\n                }\r\n\r\n                if(outsiderTrigger){\r\n                    return this.setState({\r\n                        error:true,\r\n                        errorMessage:\"Bets can only be added between registered users!\"\r\n                    }) \r\n                }\r\n    \r\n                if(copyAdditionalClauses.length >= 1 && copyAdditionalClauses[0].value !== \"\")\r\n                copyAdditionalClauses.forEach(clause => {\r\n                    if(clause.value !== \"\"){\r\n                        additionalClauses.push(clause.value);\r\n                       }\r\n                })\r\n             //TESTIRANJE DA LI JE DOBRO POPUNJENO\r\n    \r\n            people.forEach(person => {\r\n                if(person.value === \"\" || person.bet === \"\"){\r\n                    falseValue = true;\r\n                }\r\n            })\r\n    \r\n             if(subject !== \"\" && falseValue === false){\r\n    \r\n                if(moneyBet){\r\n                        newBet = {\r\n                            subject,\r\n                            type: \"money\",\r\n                            jointBet:true,\r\n                            differentStakes,\r\n                            limitedDuration : limitedCheck,\r\n                            limitedDurationValue : limitedCheckValue,\r\n                            finished:false,\r\n                            additionalClauses,\r\n                            participants:people,\r\n                            approvedAddArray:[],\r\n                            approvedEditArray:[],\r\n                            approvedFinishArray:[]\r\n                        }\r\n                }\r\n                else{\r\n                    newBet = {\r\n                        subject,\r\n                        type: \"other\",\r\n                        jointBet:true,\r\n                        differentStakes,\r\n                        limitedDuration : limitedCheck,\r\n                        limitedDurationValue : limitedCheckValue,\r\n                        finished:false,\r\n                        additionalClauses,\r\n                        participants:people,\r\n                        approvedAddArray:[],\r\n                        approvedEditArray:[],\r\n                        approvedFinishArray:[]\r\n                    }\r\n                }\r\n               if(this.props.editMode){\r\n                newBet._id = this.props.editId;\r\n                const editBetPromise = editBetRequest(\"editBet\", this.props.selectedGroup, newBet);\r\n                editBetPromise.then(res => {\r\n                    this.setState({\r\n                        success:true,\r\n                        successMessage:\"Edited bet has been sent for approval!\"\r\n                    }, () => {\r\n                        setTimeout(() => window.location.reload(), 1000)\r\n                    })\r\n                }).catch(err => {\r\n                    this.setState({\r\n                        error:true,\r\n                        errorMessage:\"Could not edit bet!\"\r\n                    })\r\n                })\r\n               }\r\n               else{\r\n                const uploadBetPromise = uploadBetRequest(false, false, this.state.selectedGroup, newBet);\r\n                uploadBetPromise.then(res => {\r\n                    this.setState({\r\n                        success:true,\r\n                        successMessage:\"Bet has been sent for approval!\"\r\n                    }, () => {\r\n                        setTimeout(() => this.props.history.push({\r\n                            pathname:'/active-bets',\r\n                            state:{user : this.state.user,\r\n                                groups:this.state.groups,\r\n                                selectedGroup: this.state.selectedGroup}\r\n                        }), 1000)\r\n                    })\r\n                }).catch(err => {\r\n                       this.setState({\r\n                           error:true,\r\n                           errorMessage:\"Could not upload bet to server!\"\r\n                       })\r\n                })\r\n               }\r\n            }\r\n    \r\n            else{\r\n                this.setState({error: true, errorMessage: \"Bet has not been filled up properly!\"})\r\n            }\r\n            }\r\n    \r\n            //Obična opklada\r\n            else{\r\n    \r\n                if(moneyBet && !differentStakes){\r\n                    betAmount = parseFloat(document.getElementById('newBetAmount').value);\r\n                 }\r\n                else if(!moneyBet && !differentStakes){\r\n                    otherStakes = document.getElementById('newBetOther').value;\r\n                }\r\n    \r\n                //Između koga je opklada -> People varijabla\r\n\r\n                copyParticipants.forEach((participant,index) => {\r\n                    if(participant.name === this.state.user.nickname){\r\n                        rightUserTrigger = true;\r\n                    }\r\n                    if(copySuggestions.indexOf(participant.name) === -1){\r\n                        outsiderTrigger = true;\r\n                    }\r\n                    if(!this.state.equalBets){\r\n                        if(!participant.value || !participant.name){\r\n                            falseValue = true;\r\n                        }\r\n                        else{\r\n                            people.push({\r\n                                name : participant.name,\r\n                                value: participant.value\r\n                            })\r\n                        }\r\n                    }\r\n               \r\n                    else{\r\n                        if(!participant.value || !participant.name || !participant.singleStake){\r\n                            falseValue = true;\r\n                        }\r\n                        else{\r\n                            otherStakes = null;\r\n                            if(index === 0){\r\n                                let switchStake;\r\n                                if(moneyBet || !isNaN(copyParticipants[1].singleStake)){\r\n                                    switchStake = parseFloat(copyParticipants[1].singleStake);\r\n                                }\r\n                                else{\r\n                                    switchStake = copyParticipants[1].singleStake;\r\n                                }\r\n                         \r\n                                people.push({\r\n                                    name : participant.name,\r\n                                    value: participant.value,\r\n                                    singleStake : switchStake\r\n                                })\r\n                            }\r\n\r\n                            else{\r\n                                let switchStake;\r\n                            if(moneyBet || !isNaN(copyParticipants[0].singleStake)){\r\n                                switchStake = parseFloat(copyParticipants[0].singleStake);\r\n                            }\r\n\r\n                            else{\r\n                                switchStake = copyParticipants[0].singleStake;\r\n                            }\r\n                        \r\n                            people.push({\r\n                                name : participant.name,\r\n                                value: participant.value,\r\n                                singleStake : switchStake\r\n                            })\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                })\r\n               \r\n                if(!rightUserTrigger){\r\n                    return this.setState({\r\n                        error:true,\r\n                        errorMessage:\"You can't add bets that don't include you!\"\r\n                    })\r\n                }\r\n            \r\n                if(outsiderTrigger){\r\n                    return this.setState({\r\n                        error:true,\r\n                        errorMessage:\"Bets can only be added between registered users!\"\r\n                    })  \r\n                }\r\n   \r\n                //Testiranje dodatnih klauzula => additionalClauses varijabla\r\n                if(copyAdditionalClauses.length >= 1 && copyAdditionalClauses[0].value !== \"\")\r\n                copyAdditionalClauses.forEach(clause => {\r\n                    if(clause.value !== \"\"){\r\n                        additionalClauses.push(clause.value);\r\n                       }\r\n                })\r\n    \r\n                //Testiranje da li postoji u šta se klade\r\n                if(!differentStakes){\r\n                    if(moneyBet){\r\n                        if(!betAmount){\r\n                            falseValue = true;\r\n                        }\r\n                    }\r\n                    else{\r\n                        if(!otherStakes){\r\n                            falseValue = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(subject !== \"\" && !falseValue){\r\n    \r\n                    if(moneyBet){\r\n                            newBet = {\r\n                                subject,\r\n                                type: \"money\",\r\n                                differentStakes,\r\n                                amount: differentStakes ? null : betAmount,\r\n                                limitedDuration : limitedCheck,\r\n                                limitedDurationValue : limitedCheckValue,\r\n                                finished:false,\r\n                                additionalClauses,\r\n                                participants:people,\r\n                                approvedAddArray:[],\r\n                                approvedEditArray:[],\r\n                                approvedFinishArray:[]\r\n                            }\r\n                    }\r\n                    else{\r\n                        newBet = {\r\n                            subject,\r\n                            type: \"other\",\r\n                            differentStakes,\r\n                            stake:otherStakes,\r\n                            limitedDuration : limitedCheck,\r\n                            limitedDurationValue : limitedCheckValue,\r\n                            finished:false,\r\n                            additionalClauses,\r\n                            participants:people,\r\n                            approvedAddArray:[],\r\n                            approvedEditArray:[],\r\n                            approvedFinishArray:[]\r\n                        }\r\n          \r\n                    }\r\n                  if(this.props.editMode){\r\n                    newBet._id = this.props.editId;\r\n                    const editBetPromise = editBetRequest(\"editBet\", this.props.selectedGroup, newBet);\r\n                    editBetPromise.then(res => {\r\n                        this.setState({\r\n                            success:true,\r\n                            successMessage:\"Edited bet has been sent for approval!\"\r\n                        }, () => {\r\n                            setTimeout(() => window.location.reload(), 1000)\r\n                        })\r\n                    }).catch(err => {\r\n                        this.setState({\r\n                            error:true,\r\n                            errorMessage:\"Could not edit bet!\"\r\n                        })\r\n                    })\r\n                  }\r\n                  else{\r\n                    const uploadBetPromise = uploadBetRequest(false, false, this.state.selectedGroup, newBet);\r\n                    uploadBetPromise.then(res => {\r\n                        this.setState({\r\n                            success:true,\r\n                            successMessage:\"Bet has been sent for approval!\"\r\n                        }, () => {\r\n                            setTimeout(() => this.props.history.push({\r\n                                pathname:'/active-bets',\r\n                                state:{\r\n                                    groups:this.state.groups,\r\n                                    selectedGroup: this.state.selectedGroup,\r\n                                    user : this.state.user,}\r\n                            }), 1000)\r\n                        })\r\n                    }).catch(err => {\r\n                           this.setState({\r\n                               error:true,\r\n                               errorMessage:\"Could not upload bet to server!\"\r\n                           })\r\n                    })\r\n                  }\r\n                }\r\n        \r\n                else{\r\n                    this.setState({error: true, errorMessage: \"Bet has not been filled properly!\"})\r\n                }\r\n            } \r\n    }\r\n\r\n    closeModals = () => {\r\n        if(this.state.groupsOpen){\r\n            this.setState({groupsOpen:false})\r\n        }\r\n    }\r\n\r\n    drop = (item, monitor, type, id) => {\r\n        if(type === \"regularBet\"){\r\n           let copyParticipantsFromState = [...this.state.participants];\r\n           copyParticipantsFromState.forEach(participant => {\r\n               if(participant.id === id){\r\n                   participant.name = item.name;\r\n               }\r\n           })\r\n            this.setState({participants:copyParticipantsFromState}, () =>{\r\n                this.promjeniJebenuklasu(id);\r\n            });\r\n        }\r\n        \r\n        else if(type === \"jointBet\"){\r\n           \r\n \r\n        if(id === \"left\"){\r\n         let newJointSelected = [...this.state.jointSelected];\r\n         newJointSelected.push({name: item.name, id:id});\r\n         this.setState({jointSelected:newJointSelected})\r\n        }\r\n \r\n        else{\r\n         let newJointSelected = [...this.state.jointSelected];\r\n         newJointSelected.push({name: item.name, id:id});\r\n         this.setState({jointSelected:newJointSelected})\r\n        } \r\n          \r\n       \r\n        }\r\n      \r\n    }\r\n\r\n    getAndSetEditValues = () => {\r\n        const theGroup = this.props.groups.filter(group => group._id === this.props.selectedGroup);\r\n        const theOne = theGroup[0].activeBets.filter(bet => bet._id === this.props.editId);\r\n\r\n        let filteredBet = theOne[0];\r\n\r\n        if(filteredBet.jointBet){\r\n            let newJointSelected = [];\r\n            filteredBet.participants.forEach(item => {\r\n                item.participants.forEach(participant => {\r\n                    newJointSelected.push({id: item.side, name:participant})\r\n                })\r\n            })\r\n\r\n            let newAdditionalClauses = [];\r\n            if(filteredBet.additionalClauses.length > 0){\r\n                filteredBet.additionalClauses.forEach((clause, index) => {\r\n                    newAdditionalClauses.push({\r\n                        name:`newBetAdditionalClause${index+1}`,\r\n                        value: clause\r\n                    });\r\n                })\r\n            }\r\n\r\n            this.setState({\r\n                jointBet:true,\r\n                jointSelected:newJointSelected,\r\n                limitedCheck: filteredBet.limitedDuration,\r\n                moneyClicked : filteredBet.type === \"money\" ? true:false,\r\n                additionalClauses:newAdditionalClauses\r\n            }, () => {\r\n                if(filteredBet.type === \"money\"){\r\n                    document.getElementById('moneyBetCheck').checked = true;\r\n                }\r\n\r\n                if(filteredBet.limitedDuration){\r\n                    document.getElementById('durationLimitedCheck').checked = true;\r\n                    document.getElementById('durationLimitedValue').value = filteredBet.limitedDurationValue;\r\n                } \r\n            document.getElementById('newBetSubject').value = filteredBet.subject;\r\n            document.getElementById('joint-left-side-input1').value = filteredBet.participants[0].value;\r\n            document.getElementById('joint-left-side-input2').value = filteredBet.participants[0].bet;\r\n            document.getElementById('joint-right-side-input1').value= filteredBet.participants[1].bet;\r\n            document.getElementById('joint-right-side-input2').value = filteredBet.participants[1].value;\r\n            })\r\n        }\r\n        else{\r\n            let newParticipants = filteredBet.participants.map((participant, index) => {\r\n                participant.id = `newBetParticipant${index+1}`;\r\n                return participant;\r\n            })\r\n    \r\n            let newAdditionalClauses = [];\r\n            if(filteredBet.additionalClauses.length > 0){\r\n                filteredBet.additionalClauses.forEach((clause, index) => {\r\n                    newAdditionalClauses.push({\r\n                        name:`newBetAdditionalClause${index+1}`,\r\n                        value: clause\r\n                    });\r\n                })\r\n            }\r\n    \r\n            this.setState({\r\n                additionalClauses:newAdditionalClauses,\r\n                participants:newParticipants,\r\n                limitedCheck: filteredBet.limitedDuration,\r\n                moneyClicked : filteredBet.type === \"money\" ? true:false,\r\n                equalBets: filteredBet.differentStakes\r\n            }, () => {\r\n                document.getElementById('newBetSubject').value = filteredBet.subject;\r\n                if(filteredBet.type === \"money\" && filteredBet.differentStakes === false){\r\n                    document.getElementById('moneyBetCheck').checked = true;\r\n                    document.getElementById('newBetAmount').value = filteredBet.amount;\r\n                }\r\n                else if(filteredBet.type === \"other\" && filteredBet.differentStakes === false){\r\n                    document.getElementById('newBetOther').value = filteredBet.stake;\r\n                }\r\n                if(filteredBet.differentStakes ){\r\n                    document.getElementById('moneyBetEquality').checked = true;\r\n                    \r\n                }\r\n        \r\n                if(filteredBet.limitedDuration){\r\n                    document.getElementById('durationLimitedCheck').checked = true;\r\n                    document.getElementById('durationLimitedValue').value = filteredBet.limitedDurationValue;\r\n                }    \r\n            }) \r\n        }\r\n    }\r\n\r\n    handleGroupModal = () => {\r\n        this.setState({\r\n          groupsOpen:true\r\n        })\r\n    }\r\n\r\n    handleGroupChange = (e) => {\r\n        if(e.target.innerHTML.indexOf('>') === -1){\r\n            let newName = e.target.innerHTML;\r\n            const newGroup = this.state.groups.filter(group => group.name === newName);\r\n            const fieldsToRevert = Array.from(document.getElementsByClassName('participant-input-name'));\r\n            fieldsToRevert.forEach(field => field.classList.remove('selected-person'))\r\n         this.setState({\r\n           people:newGroup[0].people,\r\n           groupsOpen:false,\r\n           jointSelected: [],   \r\n           participants : [\r\n            {id:\"newBetParticipant1\", name:\"\", value:\"\", singleStake : \"\"},\r\n            {id:\"newBetParticipant2\", name:\"\", value:\"\", singleStake : \"\"}],\r\n           selectedGroup: newGroup[0]._id,\r\n           selectedGroupName: newGroup[0].name\r\n         })\r\n        }\r\n    }\r\n\r\n    handleLimitedCheck = () => {\r\n        let newCheck = !this.state.limitedCheck;\r\n        this.setState({limitedCheck: newCheck});\r\n    }\r\n\r\n    hideError = (e) => {\r\n        e.stopPropagation();\r\n        this.setState({error:false, errorMessage:\"\"})\r\n    }\r\n\r\n    jointBetFunction = (e) => {\r\n        e.stopPropagation();\r\n        let newValue = !this.state.jointBet;\r\n        if(newValue){\r\n            document.getElementById('jointBet').innerHTML = \"Obična opklada\";\r\n        }\r\n        else{\r\n            document.getElementById('jointBet').innerHTML = \"Združena opklada\";\r\n        }\r\n        this.setState({\r\n            participants : [\r\n                {id:\"newBetParticipant1\", name:\"\", value:\"\", singleStake : \"\"},\r\n                {id:\"newBetParticipant2\", name:\"\", value:\"\", singleStake : \"\"}\r\n            ],\r\n            jointSelected: [],\r\n            additionalClauses:[\r\n                {name :'newBetAdditionalClause1',\r\n                 value:\"\"}],\r\n            limitedCheck: false,\r\n            moneyClicked: false,\r\n            equalBets: false,\r\n            jointBet : newValue,\r\n            draggableElement:{element: \"\", id: \"\"},\r\n            error:false,\r\n            errorMessage:\"\"})\r\n    }\r\n\r\n    moneyClickFunction = () => {\r\n        let clickSwitch = !this.state.moneyClicked;\r\n        this.setState({moneyClicked : clickSwitch});\r\n    }\r\n\r\n    moneyEqualBets = (e,number) => {\r\n        e.stopPropagation();\r\n        let clickEqualBets = !this.state.equalBets;\r\n        if(this.state.jointBet){\r\n\r\n        }\r\n\r\n        else{\r\n            if(number < 2){\r\n                number = 2;\r\n            }\r\n           \r\n            if(clickEqualBets === false){\r\n                for (let i = 0; i < number; i++){\r\n                    document.getElementById(`newBetParticipantStake${i+1}`).value = \"\";\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({equalBets : clickEqualBets});\r\n    }\r\n\r\n    nameType = (e, id) => {\r\n        e.stopPropagation();\r\n            let typingParameter = e.target.value;\r\n            let trigger = 0;\r\n            let idx;\r\n            let nameToCheck;\r\n    \r\n            if(e.key !== \"Backspace\"){\r\n                let filteredPeople = this.state.people.filter(person => {\r\n                    return person.toLowerCase().startsWith(typingParameter.toLowerCase());\r\n                })\r\n    \r\n                if(filteredPeople.length === 1){\r\n                    let copyParticipantsFromState = [...this.state.participants];\r\n                    copyParticipantsFromState.forEach((participant, index) => {\r\n                        if(participant.name === filteredPeople[0]){\r\n                            trigger++;\r\n                            nameToCheck = participant.name;\r\n                        }\r\n                        if(participant.id === id){\r\n                            idx = index;\r\n                        }       \r\n                    })\r\n    \r\n                    if(trigger > 1){\r\n                        if(typingParameter === nameToCheck){\r\n                            document.getElementById(id).classList.remove('selected-person');\r\n                            document.getElementById(id).classList.add('cannot-select-person');\r\n                        }\r\n                    }\r\n    \r\n                    else{\r\n                        document.getElementById(id).classList.add('selected-person');\r\n                        document.getElementById(id).classList.remove('cannot-select-person');\r\n                        copyParticipantsFromState[idx].name = filteredPeople[0];\r\n                        this.setState({participants : copyParticipantsFromState});\r\n                    }\r\n                }\r\n                \r\n                else if(filteredPeople.length === 0){\r\n                    document.getElementById(id).classList.remove('selected-person');\r\n                    document.getElementById(id).classList.remove('cannot-select-person');\r\n                }\r\n            }\r\n        \r\n            else if(e.key === \"Backspace\" && e.target.value !== \"\"){\r\n                let participantExists = false;\r\n                for(let i = 0; i < this.state.people.length; i++){\r\n                    if(this.state.people[i].toLowerCase() === typingParameter.toLowerCase()){\r\n                        participantExists = true;\r\n                        break;\r\n                    }\r\n                }\r\n    \r\n                if(participantExists){\r\n                    let copyParticipantsFromState = [...this.state.participants];\r\n                    copyParticipantsFromState.forEach((participant) => {\r\n                        if(participant.name === typingParameter){\r\n                            trigger++;\r\n                        }\r\n                    })\r\n    \r\n                    if(trigger >= 2){\r\n                        document.getElementById(id).classList.remove('selected-person');\r\n                        document.getElementById(id).classList.add('cannot-select-person');          \r\n                    }\r\n                    else{     \r\n                        document.getElementById(id).classList.remove('cannot-select-person');\r\n                        document.getElementById(id).classList.add('selected-person');\r\n                    }\r\n                }\r\n    \r\n                else{\r\n                    document.getElementById(id).classList.remove('selected-person');\r\n                    document.getElementById(id).classList.remove('cannot-select-person');\r\n                }\r\n            }\r\n            \r\n            if(typingParameter === \"\"){\r\n                document.getElementById(id).classList.remove('selected-person');\r\n                document.getElementById(id).classList.remove('cannot-select-person');\r\n            }\r\n    }\r\n    \r\n    promjeniJebenuklasu(id){\r\n        const hep = () => document.querySelector(`#${id}`).classList.add('selected-person');\r\n\r\n        setTimeout(hep, 10);\r\n    }\r\n\r\n    removeJointParticipant = (e,name) => {\r\n       let copyJointSelected = [...this.state.jointSelected];\r\n       let newJointSelected =  copyJointSelected.filter(item => {\r\n            return item.name !== name;\r\n       })\r\n\r\n       this.setState({jointSelected:newJointSelected})\r\n    }\r\n\r\n    removeAdditionalClause = (e) => {\r\n        e.stopPropagation();\r\n        let copyClausesFromState = [...this.state.additionalClauses];\r\n        for (let i = 0; i < copyClausesFromState.length; i++){\r\n            if(copyClausesFromState[i].name === e.target.nextSibling.id){\r\n                copyClausesFromState.splice(i,1);\r\n                break;\r\n            }\r\n        }\r\n        copyClausesFromState.forEach((clause,index) => {\r\n            clause.name = `newBetAdditionalClause${index+1}`\r\n        })\r\n       this.setState({additionalClauses:copyClausesFromState});\r\n    }\r\n\r\n    removeParticipant = (e) => {\r\n        e.stopPropagation();\r\n        let copyParticipantsFromState = [...this.state.participants];\r\n        copyParticipantsFromState.forEach((participant, index) => {\r\n            if(participant.id === e.target.parentNode.firstChild.id){\r\n                copyParticipantsFromState.splice(index,1);\r\n            }\r\n        })\r\n        copyParticipantsFromState.forEach((participant, index) => {\r\n            participant.id = `newBetParticipant${index + 1}`\r\n        })\r\n\r\n        this.setState({participants:copyParticipantsFromState});\r\n    }\r\n\r\n    settingAdditionalClauseValue = (e) => {\r\n        e.stopPropagation();\r\n        let copyClausesFromState = [...this.state.additionalClauses];\r\n        copyClausesFromState.forEach(clause => {\r\n            if(clause.name === e.target.id){\r\n                clause.value = e.target.value;\r\n            }\r\n        })\r\n        this.setState({additionalClauses:copyClausesFromState})\r\n    }\r\n\r\n    settingParticipants = (e, type) => {\r\n    let typingParameter = e.target.value;\r\n    let copyParticipantsFromState = [...this.state.participants];\r\n\r\n            copyParticipantsFromState.forEach(participant => {\r\n                if(participant.id === e.target.id){\r\n                    if(type === 'name'){\r\n                        participant.name = typingParameter;\r\n                    }\r\n                }\r\n\r\n                else if(participant.id === e.target.parentNode.firstChild.id){\r\n                    if(type === 'value'){\r\n                        participant.value = e.target.value;\r\n                    }\r\n                    else if(type === 'stake'){\r\n                        participant.singleStake = e.target.value;\r\n                    }\r\n                }    \r\n            })\r\n\r\n    this.setState({participants : copyParticipantsFromState})\r\n    }\r\n\r\n    render() {\r\n    let participantsToRender = this.state.participants.map((item, index) => {\r\n    return (\r\n        <Fragment key={item.id}>\r\n        <div className=\"full-line-center basic-fx justify-between-fx\">\r\n            <DropInput \r\n            classNameToDisplay=\"participant-input-name\"\r\n             itemOnKeyUp={this.nameType} \r\n             itemClicked={`newBetParticipant${index + 1}`}\r\n             itemOnDrop={this.drop} \r\n             itemOnChange={this.settingParticipants}\r\n             id={`newBetParticipant${index + 1}`}\r\n             itemName={item.name}\r\n             placeholder=\"nickname\"/>\r\n\r\n            <input type=\"text\" \r\n            name={`newBetParticipantValue${index + 1}`} \r\n            id={`newBetParticipantValue${index + 1}`} \r\n            value={item.value}\r\n            onChange={e => this.settingParticipants(e, 'value')}\r\n            placeholder=\"says...\"/>\r\n            \r\n\r\n            <input type={this.state.moneyClicked ? \"number\" : \"text\"}\r\n            name={`newBetParticipantStake${index + 1}`} \r\n            id={`newBetParticipantStake${index + 1}`} \r\n            onChange={e => this.settingParticipants(e, 'stake')}\r\n            value={this.state.equalBets ? item.singleStake : \"\"}\r\n            placeholder={this.state.equalBets ? this.state.moneyClicked ? \"bet / how much money?\"  : \"bet / in what?\" : null}\r\n            disabled={!this.state.equalBets} />\r\n            {this.state.participants.length > 2 ? <span className=\"removeAdditionalClauseOrParticipant\" onClick={this.removeParticipant}>x</span> : null}\r\n        </div>\r\n        {this.state.people.map(person => {\r\n            let check = this.alreadyExistsCheck(person, \"regular\");\r\n            if (check === false) {\r\n                return (\r\n                    <DraggableName\r\n                    classNameToDisplay=\"not-chosen\"\r\n                    id={`${item.id}${person}`}\r\n                    key={person}\r\n                    person={person}\r\n                    itemOnClick={this.addSuggestion}\r\n                    itemClicked={`newBetParticipant${index + 1}`}\r\n                    />\r\n                )\r\n            }\r\n                else {\r\n                    return null\r\n                };\r\n          \r\n    })}\r\n        </Fragment>\r\n    )\r\n    })\r\n\r\n    let jointBetToRender = (\r\n        <Fragment>\r\n            <div id=\"joint-bet-container\" className=\"basic-fx wrap-fx\">\r\n\r\n            <JointDroppable\r\n                        idToDisplay=\"left-joint-side\"\r\n                        itemOnDrop={this.drop}\r\n                        jointSelected={this.state.jointSelected}\r\n                        searchIndex = \"left\"\r\n                        divId={\"left-joint-\"}\r\n                        removeJointParticipant={this.removeJointParticipant}\r\n                        />\r\n\r\n                <JointDroppable \r\n                idToDisplay=\"right-joint-side\"\r\n                itemOnDrop={this.drop}\r\n                jointSelected={this.state.jointSelected}\r\n                searchIndex = \"right\"\r\n                divId={\"right-joint-\"}\r\n                removeJointParticipant={this.removeJointParticipant}\r\n                />\r\n            </div>\r\n\r\n            <div id=\"joint-bet-inputs-container\" className=\"basic-fx\">\r\n            <div className=\"input-joint-side\">\r\n        <input id=\"joint-left-side-input1\" type=\"text\" placeholder={\"left side says what\"}/>\r\n        <input id=\"joint-left-side-input2\" type=\"text\" placeholder=\"amount\"/>\r\n            </div>\r\n            <div className=\"input-joint-side\">\r\n            <input id=\"joint-right-side-input1\" type=\"text\" placeholder=\"amount\"/>\r\n            <input id=\"joint-right-side-input2\" type=\"text\" placeholder=\"right side says what\"/>\r\n            </div>\r\n        </div>\r\n\r\n\r\n            <div id=\"joint-bet-names-suggestions\" className=\"basic-fx wrap-fx\">\r\n            {this.state.people.map(person => {\r\n            let check = this.alreadyExistsCheck(person, \"joint\");\r\n            if (check === false) {\r\n                return (\r\n                    <DraggableName\r\n                    classNameToDisplay=\"not-chosen\"\r\n                    id={`jointBet${person}`}\r\n                    key={person}\r\n                    person={person}\r\n                    itemOnClick={e => false}\r\n                    />\r\n                )\r\n            }\r\n                else {\r\n                    return null\r\n                };\r\n          \r\n    })}\r\n    </div>\r\n\r\n            </Fragment>\r\n        );\r\n\r\n        \r\n     const MyPreview = () => {\r\n        const {display, itemType, item, style} = usePreview();\r\n        if (!display) {\r\n          return null;\r\n        }\r\n        return <div className=\"onDrag\" style={style}>{item.name}</div>;\r\n      };\r\n\r\n        return (\r\n     \r\n            <DndProvider backend={windowWidth(480) ? Backend : TouchBackend}>\r\n                {windowWidth(480) ? null : <MyPreview />}\r\n                <div className={`${this.props.editMode ? \"\" : \"main-container main-background\"} basic-column-fx justify-center-fx align-center-fx`}>\r\n                {this.state.pageLoaded ?      <Fragment>\r\n            <div id=\"add-new-bet-container\" className=\"basic-fx justify-center-fx \" onClick={this.closeModals}>\r\n                <form id=\"addNewBet\" onSubmit={this.createNewBet} onChange={this.hideError}>\r\n    \r\n                    <div className=\"full-line-space basic-fx justify-between-fx\">\r\n                        <label htmlFor=\"newBetSubject\">Bet subject</label>\r\n                        <input type=\"text\" id=\"newBetSubject\" name=\"newBetSubject\" />\r\n                    </div>\r\n                    {this.state.pageLoaded && !this.props.editMode ? <div id=\"add-bet-group-container\" className=\"basic-fx justify-center-fx\">\r\n                        <Groups \r\n                    groups={this.state.groups}\r\n                    groupsOpen={this.state.groupsOpen}\r\n                    handleGroupModal={this.handleGroupModal}\r\n                    handleGroupChange={this.handleGroupChange}\r\n                    selectedGroup={this.state.selectedGroup} \r\n                    selectedGroupName={this.state.selectedGroupName}\r\n                    /></div> : null}   \r\n                    <div className=\"bet-between\">Bet is between:</div>\r\n    \r\n                {!this.state.jointBet ? participantsToRender : jointBetToRender}\r\n\r\n                    <div className=\"full-line-space basic-fx justify-between-fx\">\r\n                        {!this.state.jointBet ? <button type=\"button\" className=\"add-clause-participant-button\" onClick={this.addNewParticipant}>Add participant</button> : null}\r\n                        <button type=\"button\" id=\"jointBet\" className=\"add-clause-participant-button\" onClick={this.jointBetFunction}>Group bet</button>\r\n                    </div>   \r\n                    <div className=\"full-line-space basic-fx justify-between-fx\">\r\n                        <label htmlFor=\"moneyBetCheck\">Money bet?</label>\r\n                        <input type=\"checkbox\" id=\"moneyBetCheck\" name=\"moneyBetCheck\" onChange={this.moneyClickFunction} />\r\n                    </div>\r\n                    {!this.state.jointBet && this.state.participants.length < 3 ?    <div className=\"full-line-space basic-fx justify-between-fx\">\r\n                        <label htmlFor=\"moneyBetEquality\">Different stakes?</label>\r\n                        <input type=\"checkbox\" id=\"moneyBetEquality\" name=\"moneyBetEquality\" onChange={e => this.moneyEqualBets(e,this.state.participants.length)} />\r\n                    </div>  : null}\r\n                                \r\n                    <div className=\"full-line-space basic-fx justify-between-fx\">\r\n                        <label htmlFor=\"durationLimitedCheck\">Time limited?</label>\r\n                        <input type=\"checkbox\" id=\"durationLimitedCheck\" name=\"durationLimitedCheck\" onChange={this.handleLimitedCheck}/>\r\n                    </div>\r\n\r\n                    {this.state.limitedCheck ? <div className=\"full-line-space basic-fx justify-between-fx\">\r\n                        <label htmlFor=\"durationLimitedValue\">Until when?</label>\r\n                        <input type=\"text\" id=\"durationLimitedValue\" name=\"durationLimitedValue\" />\r\n                    </div> : null}\r\n                {!this.state.jointBet ? !this.state.equalBets ?\r\n                    <Fragment>\r\n                        {this.state.moneyClicked ?\r\n                    <div className=\"full-line-space basic-fx justify-between-fx\">\r\n                        <label htmlFor=\"newBetAmount\">Amount</label>\r\n                        <input type=\"text\" id=\"newBetAmount\" name=\"newBetAmount\" />\r\n                    </div> : null}\r\n                    {!this.state.moneyClicked ?\r\n                    <div className=\"full-line-space basic-fx justify-between-fx\">\r\n                        <label htmlFor=\"newBetOther\">Winner gets</label>\r\n                        <input type=\"text\" id=\"newBetOther\" name=\"newBetOther\" />\r\n                    </div> : null}</Fragment> : null : null}\r\n                    \r\n\r\n    {this.state.additionalClauses.map((item, index) => {\r\n        return (\r\n            <div className=\"full-line-space basic-fx justify-between-fx\" key={item.name}>\r\n            <label htmlFor={`newBetAdditionalClause${index+1}`}>{`Additional clause ${index + 1}`}</label>\r\n            <span className=\"removeAdditionalClauseOrParticipant\" onClick={this.removeAdditionalClause}>x</span>\r\n            <input type=\"text\" id={`newBetAdditionalClause${index+1}`} \r\n            onChange={this.settingAdditionalClauseValue} \r\n            value={this.state.additionalClauses[index].value}\r\n            name={`newBetAdditionalClause${index+1}`} />\r\n        </div>\r\n        )\r\n    })}\r\n                 \r\n                    \r\n                    <button type=\"button\" className=\"add-clause-participant-button\" onClick={this.addNewAdditionalClause}>Add clause</button>\r\n{this.state.error ? <div className=\"error-message\">{this.state.errorMessage}</div> :  null}\r\n{this.state.success ? <div className=\"success-message\">{this.state.successMessage}</div> : null}\r\n\r\n                    <div id=\"add-bet-button-container\" className=\"basic-fx justify-around-fx align-center-fx\">\r\n<button type=\"submit\" form=\"addNewBet\">{this.props.editMode ? \"Edit bet\" : \"Add bet\"}</button>\r\n{this.props.editMode ? <button type=\"button\" onClick={this.props.hideModal}>Quit</button> : null }\r\n                    </div>\r\n                </form>\r\n            </div>\r\n           {this.props.editMode ? null : <ReturnButton returnToMain = {returnToMain.bind(null, this.props)} \r\n           classToDisplay=\"return-add-button\" text={\"Main menu\"} />} \r\n        \r\n            </Fragment> : null }\r\n                </div>\r\n       \r\n            </DndProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewBet;","G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\WaitingForApproval.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\ActiveBets.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\JoinNewGroup.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\CreateNewGroup.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Other\\Stats.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\MISC\\Page404.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\ManageGroups.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\MISC\\ReturnButton.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\DifferentStakes.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\NonAuthHome.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\Groups.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Other\\Notifications.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\SameStakes.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Profile\\MainProfile.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\JointBet.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\ManageGroupsModal.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\GroupLine.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\MISC\\ApproveBox.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Bets\\EditModal.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\DumbComponents\\SimpleFunctions.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Axios\\UserRequests.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Axios\\BetRequests.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Axios\\GroupRequests.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Axios\\OtherRequests.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Navigation\\SignOutNav.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Navigation\\MenuManageBets.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Navigation\\MenuManageGroups.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\DnD-Utilities\\DraggableName.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\DnD-Utilities\\JointDroppable.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\DnD-Utilities\\DropInput.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\ChangeGroupName.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Profile\\ProfilePicture.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\LeaveDeleteGroup.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\InvitePeople.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\Home\\Groups\\RemovePeople.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\DnD-Utilities\\Utilities.js",[],"G:\\Programiranje\\bet-copy\\client\\src\\components\\MISC\\Mode.js",[],{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","severity":1,"message":"222","line":1,"column":17,"nodeType":"223","messageId":"224","endLine":1,"endColumn":25},{"ruleId":"221","severity":1,"message":"225","line":1009,"column":25,"nodeType":"223","messageId":"224","endLine":1009,"endColumn":33},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'itemType' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]